package com.incognito.tools.stickycorners.detector.settings;

import com.incognito.tools.stickycorners.detector.Detector;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JSpinner;
import javax.swing.SpinnerNumberModel;
import java.awt.Dimension;
import java.awt.Insets;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;

/**
 * Created by jahorton on 1/2/2019
 */
public class Form {
    private final Detector detector;

    private final JDialog frame;
    private JPanel root;
    private JSpinner numSeconds;
    private JPanel pnlScreens;
    private JSpinner numFontSize;

    private EmptyConsumer closeListener;

    public Form(long curInterval, Detector detector) {
        this.detector = detector;

        $$$setupUI$$$();

        frame = new JDialog();
        frame.setTitle("Settings");

        numSeconds.setModel(new SpinnerNumberModel(curInterval, 5, 604800, 5));

        numFontSize.addChangeListener(e -> {
            detector.setDebugFontSize((int) numFontSize.getValue());
            detector.repaint();
        });
        numFontSize.setModel(new SpinnerNumberModel(detector.getDebugFontSize(), 8, 72, 1));

        ((ScreensDisplayPanel) pnlScreens).addChangeListener(e -> detector.repaint());

        frame.setContentPane(root);
        frame.pack();
        frame.setResizable(false);
        frame.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
        frame.setVisible(true);
        frame.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosed(WindowEvent e) {
                if (closeListener != null) {
                    closeListener.run();
                }
            }
        });
    }

    public void bringToFront() {
        frame.requestFocus();
    }

    public void onClose(EmptyConsumer method) {
        closeListener = method;
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        root = new JPanel();
        root.setLayout(new GridLayoutManager(4, 2, new Insets(5, 5, 5, 5), -1, -1));
        root.add(pnlScreens, new GridConstraints(3, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, new Dimension(-1, 50), null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("Auto-Refresh Interval (seconds)");
        root.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Debug Font Size");
        root.add(label2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        numFontSize = new JSpinner();
        root.add(numFontSize, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(50, -1), null, 0, false));
        numSeconds = new JSpinner();
        root.add(numSeconds, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(50, -1), null, 0, false));
        final JLabel label3 = new JLabel();
        label3.setText("Click on a corner to enable/disable passing through");
        root.add(label3, new GridConstraints(2, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return root;
    }

    @FunctionalInterface
    public static interface EmptyConsumer {
        public void run();
    }

    public long getDuration() {
        return (long) numSeconds.getValue();
    }

    private void createUIComponents() {
        pnlScreens = new ScreensDisplayPanel(detector.getScreens(), detector.getCorners());
    }

}
